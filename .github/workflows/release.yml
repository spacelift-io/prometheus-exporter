name: Release

on: { push }

jobs:
  goreleaser:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Set up Go
        uses: actions/setup-go@v3
        with: { go-version: 1.18 }

      - name: Import GPG key
        id: import_gpg
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Export GPG public key
        run: |
          echo ${{ steps.import_gpg.outputs.fingerprint }} > key.fingerprint
          gpg --armor --export ${{ steps.import_gpg.outputs.keyid }} > key.asc

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        # If the workflow was triggered from a tag, go ahead and publish the release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser (no publish)
        uses: goreleaser/goreleaser-action@v3
        # If the workflow wasn't created from a tag, don't publish the release, but still
        # build the artifacts so we can use them in the container build process.
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          version: latest
          args: build --rm-dist --snapshot
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive artifacts for use in Docker build
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist

  dockerpublish:
    name: Build and deploy the image
    needs: goreleaser
    runs-on: ubuntu-latest
    container: docker
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Install the latest AWS CLI
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
        run: |
          apk add --no-cache python3 py3-pip
          pip3 install --upgrade pip
          pip3 install awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900

      - name: Log in to Amazon public ECR
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push the image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.PUBLIC_PROMETHEUS_EXPORTER_ECR_REPOSITORY_URL }}:${{ github.ref == 'refs/heads/main' && 'future' || 'latest' }}
            ${{ startsWith(github.ref, 'refs/tags/v') && format('{0}:{1}', secrets.PUBLIC_PROMETHEUS_EXPORTER_ECR_REPOSITORY_URL, github.ref_name) || '' }}
